[tool.poetry]
name = "wally"
version = "0.1.0"
description = ""
authors = ["Saurabh <for.saurabh.tripathi@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.9"
flake8 = "^3.9.0"
twine = "^3.4.1"
coverage = "^5.5"
isort = "^5.7.0"
black = "^20.8b1"
mypy = "^0.812"
pytest = "^6.2.2"
pytest-sugar = "^0.9.4"
pytest-cov = "^2.11.1"
pydocstyle = "^6.0.0"

[tool.poetry.dev-dependencies]


[tool.poetry.scripts]
qa = "poetry_scripts:qa"
test = "poetry_scripts:test"
format = "poetry_scripts:format"
lint = "poetry_scripts:lint"
type_check = "poetry_scripts:type_check"
docs = "poetry_scripts:docs"
unit = "poetry_scripts:unit"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
ensure_newline_before_comments = true
line_length = 120
force_single_line = true

[tool.black]
line-length = 120

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov --cov-report term --cov-report term-missing --cov-report xml:coverage/coverage.xml --durations=0"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["wally"]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover", # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug", # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError", # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:", # Don't complain about mypy-specific code
    "if TYPE_CHECKING:",
]
ignore_errors = true

